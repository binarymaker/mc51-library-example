C51 COMPILER V9.60.0.0   CHARLCD                                                           07/01/2019 16:04:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CHARLCD
OBJECT MODULE PLACED IN .\Objects\charlcd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\mc51-library\modules\charlcd.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\mc5
                    -1-library\modules;..\mc51-library\drivers;..\mc51-library\stdint) DEBUG OBJECTEXTEND PRINT(.\Listings\charlcd.lst) TABS(
                    -2) OBJECT(.\Objects\charlcd.obj)

line level    source

   1          
   2          /**
   3            ******************************************************************************
   4            * ______  _                             ___  ___        _               
   5            * | ___ \(_)                            |  \/  |       | |              
   6            * | |_/ / _  _ __    __ _  _ __  _   _  | .  . |  __ _ | | __ ___  _ __ 
   7            * | ___ \| || '_ \  / _` || '__|| | | | | |\/| | / _` || |/ // _ \| '__|
   8            * | |_/ /| || | | || (_| || |   | |_| | | |  | || (_| ||   <|  __/| |   
   9            * \____/ |_||_| |_| \__,_||_|    \__, | \_|  |_/ \__,_||_|\_\\___||_|   
  10            *                                 __/ |                                 
  11            *                                |___/                                  
  12            *                                                                       
  13            * Copyright (C) 2019 Binary Maker - All Rights Reserved
  14            *
  15            * This program and the accompanying materials are made available
  16            * under the terms described in the LICENSE file which accompanies
  17            * this distribution.
  18            * Written by Binary Maker <https://github.com/binarymaker>
  19            ******************************************************************************
  20            */
  21          #include "charlcd.h"
  22          
  23          void
  24          CHARLCD_init(CHARLCD_t *context, uint8_t line, uint8_t col)
  25          {
  26   1        uint8_t i;
  27   1        
  28   1        context->row_offset[0] = 0x00;
  29   1        context->row_offset[1] = 0x40;
  30   1        context->row_offset[3] = col;
  31   1        context->row_offset[4] = 0x40 + col;
  32   1        
  33   1        GPIO_ModePin(context->regSelect_pin.port,
  34   1                     context->regSelect_pin.pin,
  35   1                     GPIO_MODE_OUTPUT);
  36   1        
  37   1        GPIO_ModePin(context->enable_pin.port,
  38   1                     context->enable_pin.pin,
  39   1                     GPIO_MODE_OUTPUT);
  40   1        
  41   1        for (i = 0; i < 4; i++)
  42   1        {
  43   2          GPIO_ModePin(context->data_pin[i].port,
  44   2                       context->data_pin[i].pin,
  45   2                       GPIO_MODE_OUTPUT);
  46   2        }
  47   1      
  48   1        /* Init sequnce as per datasheet */
  49   1        _delay_ms(100);                   /* 100ms wait for display stable */
  50   1        CHARLCD_Write(context, 0x03);
  51   1        _delay_ms(5);                     /* 4.1ms wait */
  52   1        CHARLCD_Write(context, 0x03);
  53   1        _delay_us(100);                   /* 100us wait */
C51 COMPILER V9.60.0.0   CHARLCD                                                           07/01/2019 16:04:57 PAGE 2   

  54   1        CHARLCD_Write(context, 0x03);
  55   1        _delay_us(100);                   /* 100us wait */
  56   1        CHARLCD_Write(context, 0x02);
  57   1        
  58   1        /* Function set config ------------------------------------------------- */
  59   1        context->reg_functionSet = CHARLCD_FUNCTIONSET | CHARLCD_4BITMODE |
  60   1                                   CHARLCD_5x8DOTS;
  61   1        
  62   1        if (line > 0x01)
  63   1        {
  64   2          context->reg_functionSet |= CHARLCD_2LINE;
  65   2        }
  66   1        else
  67   1        {
  68   2          context->reg_functionSet |= CHARLCD_1LINE;
  69   2        }
  70   1        
  71   1        CHARLCD_Command(context, context->reg_functionSet);
  72   1        
  73   1        /* Display control config ----------------------------------------------- */
  74   1        
  75   1        context->reg_displayControl = CHARLCD_DISPLAYCONTROL | CHARLCD_DISPLAYON |
  76   1                                      CHARLCD_CURSOROFF | CHARLCD_BLINKOFF;
  77   1        
  78   1        CHARLCD_Command(context, context->reg_displayControl);
  79   1      
  80   1        /* Clear display -------------------------------------------------------- */
  81   1        CHARLCD_Command(context, CHARLCD_CLEARDISPLAY);
  82   1        _delay_ms(10);
  83   1        
  84   1        /* Entry mode / cursor increment config --------------------------------- */
  85   1        context->reg_modeSet = CHARLCD_ENTRYMODESET | CHARLCD_ENTRYLEFT | 
  86   1                                CHARLCD_ENTRYSHIFTLEFT;
  87   1        
  88   1        CHARLCD_Command(context, context->reg_modeSet);
  89   1      }
  90          
  91          /* Low level commands ----------------------------------------------------- */
  92          void
  93          CHARLCD_EnablePulse(CHARLCD_t *context)
  94          {
  95   1        GPIO_WritePin(context->enable_pin.port,
  96   1                      context->enable_pin.pin,
  97   1                      GPIO_PIN_SET);
  98   1        
  99   1        _delay_us(100);
 100   1      
 101   1        GPIO_WritePin(context->enable_pin.port,
 102   1                      context->enable_pin.pin,
 103   1                      GPIO_PIN_RESET);
 104   1      }
 105          
 106          void
 107          CHARLCD_Write(CHARLCD_t *context, uint8_t ch)
 108          {
 109   1        uint8_t i;
 110   1      
 111   1        for (i = 0; i < 4; i++)
 112   1        {
 113   2          GPIO_WritePin(context->data_pin[i].port,
 114   2                        context->data_pin[i].pin,
 115   2                        (ch >> i) & 0x01);
C51 COMPILER V9.60.0.0   CHARLCD                                                           07/01/2019 16:04:57 PAGE 3   

 116   2        }
 117   1        
 118   1        CHARLCD_EnablePulse(context);
 119   1      }
 120          
 121          void
 122          CHARLCD_Command(CHARLCD_t *context, uint8_t cmd)
 123          {
 124   1        uint8_t msb;
 125   1        uint8_t lsb;
 126   1        
 127   1        GPIO_WritePin(context->regSelect_pin.port,
 128   1                      context->regSelect_pin.pin,
 129   1                      GPIO_PIN_RESET);
 130   1      
 131   1        msb = (cmd >> 4) & 0x0F;
 132   1        lsb = cmd  & 0x0F;
 133   1        
 134   1        CHARLCD_Write(context, msb);
 135   1        CHARLCD_Write(context, lsb);
 136   1      }
 137          
 138          void
 139          CHARLCD_Data(CHARLCD_t *context, uint8_t cmd)
 140          {
 141   1        uint8_t msb;
 142   1        uint8_t lsb;
 143   1        
 144   1        GPIO_WritePin(context->regSelect_pin.port,
 145   1                      context->regSelect_pin.pin,
 146   1                      GPIO_PIN_SET);
 147   1      
 148   1        msb = (cmd >> 4) & 0x0F;
 149   1        lsb = cmd  & 0x0F;
 150   1        
 151   1        CHARLCD_Write(context, msb);
 152   1        CHARLCD_Write(context, lsb);
 153   1      }
 154          /* High level commands ----------------------------------------------------- */
 155          void
 156          CHARLCD_SetCursor(CHARLCD_t *context, uint8_t line, uint8_t col){
 157   1        CHARLCD_Command(context , CHARLCD_SETDDRAMADDR | 
 158   1                        (context->row_offset[line] + col));
 159   1      }
 160          
 161          void
 162          CHARLCD_Clear(CHARLCD_t *context)
 163          {
 164   1        CHARLCD_Command(context, CHARLCD_CLEARDISPLAY);
 165   1        _delay_ms(2);
 166   1      }
 167          
 168          void
 169          CHARLCD_Home(CHARLCD_t *context)
 170          {
 171   1        CHARLCD_Command(context, CHARLCD_RETURNHOME);
 172   1        _delay_ms(2);
 173   1      }
 174          
 175          void
 176          CHARLCD_Display(CHARLCD_t *context, uint8_t enable)
 177          {
C51 COMPILER V9.60.0.0   CHARLCD                                                           07/01/2019 16:04:57 PAGE 4   

 178   1        if (enable == DISABLE)
 179   1        {
 180   2          CLEAR_BIT(context->reg_displayControl, CHARLCD_DISPLAYON);
 181   2        }
 182   1        else
 183   1        {
 184   2          SET_BIT(context->reg_displayControl, CHARLCD_DISPLAYON);
 185   2        }
 186   1        
 187   1        CHARLCD_Command(context, context->reg_displayControl);
 188   1      }
 189          
 190          void
 191          CHARLCD_Cursor(CHARLCD_t *context, uint8_t enable)
 192          {
 193   1        if (enable == DISABLE)
 194   1        {
 195   2          CLEAR_BIT(context->reg_displayControl, CHARLCD_CURSORON);
 196   2        }
 197   1        else
 198   1        {
 199   2          SET_BIT(context->reg_displayControl, CHARLCD_CURSORON);
 200   2        }
 201   1        
 202   1        CHARLCD_Command(context, context->reg_displayControl);
 203   1      }
 204          
 205          void
 206          CHARLCD_CursorBlink(CHARLCD_t *context, uint8_t enable)
 207          {
 208   1        if (enable == DISABLE)
 209   1        {
 210   2          CLEAR_BIT(context->reg_displayControl, CHARLCD_BLINKON);
 211   2        }
 212   1        else
 213   1        {
 214   2          SET_BIT(context->reg_displayControl, CHARLCD_BLINKON);
 215   2        }
 216   1        CHARLCD_Command(context, context->reg_displayControl);
 217   1      }
 218          
 219          void
 220          CHARLCD_ScrollDisplayLeft(CHARLCD_t *context)
 221          {
 222   1        CHARLCD_Command(context, CHARLCD_CURSORSHIFT | CHARLCD_DISPLAYMOVE | 
 223   1                        CHARLCD_MOVELEFT);
 224   1      }
 225          
 226          void
 227          CHARLCD_ScrollDisplayRight(CHARLCD_t *context)
 228          {
 229   1        CHARLCD_Command(context, CHARLCD_CURSORSHIFT | 
 230   1                        CHARLCD_DISPLAYMOVE | CHARLCD_MOVERIGHT);
 231   1      }
 232          
 233          void
 234          CHARLCD_PrintRightToLeft(CHARLCD_t *context)
 235          {
 236   1        CLEAR_BIT(context->reg_displayControl, CHARLCD_ENTRYLEFT);
 237   1        CHARLCD_Command(context, context->reg_displayControl);
 238   1      }
 239          
C51 COMPILER V9.60.0.0   CHARLCD                                                           07/01/2019 16:04:57 PAGE 5   

 240          void
 241          CHARLCD_PrintString(CHARLCD_t *context, char *msg)
 242          {
 243   1        uint16_t i = 0;
 244   1        
 245   1        while (msg[i] != '\0')
 246   1        {
 247   2          CHARLCD_Data(context, (uint8_t)msg[i]);
 248   2          i++;
 249   2        }
 250   1      }
 251          
 252          void
 253          CHARLCD_PrintInteger(CHARLCD_t *context, uint8_t line, uint8_t col)
 254          {
 255   1        _delay_ms(1);
 256   1      }
*** WARNING C280 IN LINE 253 OF ..\mc51-library\modules\charlcd.c: 'context': unreferenced local variable
*** WARNING C280 IN LINE 253 OF ..\mc51-library\modules\charlcd.c: 'line': unreferenced local variable
*** WARNING C280 IN LINE 253 OF ..\mc51-library\modules\charlcd.c: 'col': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1000    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      54
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
